para compilar: gcc -g -o nombre_ejecutable nombre_archivo.s flags (flags: -pg -no-pie, etc)
observacion: es necesario tener una funcion main en el archivo.s
para debuggear: gdb ./nombre_ejecutable -> br main (o punto de corte que se quiera ver) -> r -> n ... n
observacion: se pueden escribir comentarios con // o /* */ linea única o multilinea resp
para continuar al siguiente breakpoint: c (continue)

para ver retorno con echo debemos ejecutar los siguientes comandos en la terminal:
    *./nombre_ejecutable // ejecutamos el programa, obviamente previamente compilado.
    *retorno=$? // donde $? es la variable de entorno
    *echo "El codigo de retorno es $retorno" // una buena observacion es el argumento que toma echo. una string con las variables precedidas de $ 
    *El codigo de retorno es $retorno // lo que imprime echo donde $retorno va a ser lo que esta adentro de la variable.
para ver retorno en gdb: 
    *gdb ./nombre_ejecutable // ejecutamos el comando para debuggear con gdb.
    *r // corremos el programa
    *[... exited with code retorno] // al final de lo que devuelve gdb podemos ver el retorno
observacion importante: echo imprime el retorno en decimal y gdb en octal.

para que lea el main con un data: .text entre data y main

para imprimir las direcciones de memoria podemos agrupar de a 1, 2, 4 u 8 bytes en el comando examine, estos son los comandos:
	1 byte: x/nbx dir
	2 bytes: x/nhx dir
	4 bytes: x/nwx dir
	8 bytes: x/ngx dir
	donde la n antes del tamaño del bloque indica que queremos que nos imprmia n bloques del tamaño posterios a partir de dir. 
	la x al final es el formato de impresion que puede ser x, f, d, t y algunos mas. por otro lado las letras del medio
    b, h, w, g indican byte, short, double word, quad respectivamente.